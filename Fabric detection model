import os
import json
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, Flatten, Conv2D, Reshape, Lambda, Input, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, LambdaCallback
import matplotlib.pyplot as plt
import cv2
from pathlib import Path

train_dir = Path(r"D:\Divya\Projects\Fabric detection\Fabric detection1")
val_dir = Path(r"D:\Divya\Projects\Fabric detection\Fabric detection3")

categories = ["Cotton", "Wool", "Rayon", "Silk"]  
image_size = (224, 224)
batch_size = 16

datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical'
)

val_generator = datagen.flow_from_directory(
    val_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical'
)

num_classes = len(categories)  

input_tensor = Input(shape=(224, 224, 3))
base_model = ResNet50(weights='imagenet', include_top=False, input_tensor=input_tensor)

for layer in base_model.layers:
    layer.trainable = False

def unfreeze_layers(epoch, logs):
    if epoch == 5: 
        for layer in base_model.layers[-30:]:
            layer.trainable = True
    elif epoch == 10: 
        for layer in base_model.layers[-50:]:
            layer.trainable = True
    elif epoch == 15: 
        for layer in base_model.layers:
            layer.trainable = True

unfreeze_callback = LambdaCallback(on_epoch_end=unfreeze_layers) 

x = base_model.output
x = Conv2D(256, kernel_size=3, strides=1, padding='same', activation='relu')(x)  
x = Flatten()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.4)(x)  
out = Dense(num_classes, activation='softmax')(x) 

model = Model(inputs=base_model.input, outputs=out)

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.003), loss='categorical_crossentropy', metrics=['accuracy'])

early_stop = EarlyStopping(monitor='val_loss', patience=12, restore_best_weights=True)

history = model.fit(train_generator, validation_data=val_generator, epochs=50, callbacks=[early_stop, unfreeze_callback]) 

model.save("fabric_classifier.h5")
labels = {v: k for k, v in train_generator.class_indices.items()}
with open("labels.json", "w") as f:
    json.dump(labels, f)

def classify_image(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, image_size)
    img = img / 255.0
    img = np.expand_dims(img, axis=0)
    
    predictions = model.predict(img)[0]
    
    with open("labels.json", "r") as f:
        labels = json.load(f)
    
    label_names = list(labels.values())
    
    plt.bar(label_names, predictions * 100)
    plt.xlabel("Fabric Type")
    plt.ylabel("Percentage Confidence")
    plt.title("Fabric Classification Result")
    plt.savefig("classification_result.jpeg")
    print("Result saved as classification_result.jpeg")